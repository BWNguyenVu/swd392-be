#--- dev profile ---#
server.port=6868
server.servlet.context-path=/api/v1
# Datasource Config
spring.datasource.url=${CONNECTION_STRING_POSTGRES_PROD}
spring.datasource.username=${POSTGRES_USERNAME}
spring.datasource.password=${POSTGRES_PASSWORD}

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# JPA Config
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#JWT
jwt.secret={JWT_SECRET}

# Email Config
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USERNAME}
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Thymeleaf template configuration
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.mail.default-encoding=UTF-8
spring.main.allow-bean-definition-overriding=true

#Kafka Config
#kafka server url
#spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER}
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false

#0: no wait for kafka response
#1: leader write success, not wait for follower
#-1: wait for all leader, and replication
spring.kafka.producer.acks=-1
spring.kafka.producer.retries=1

#prevent duplicate send
spring.kafka.producer.properties.[enable.idempotence]=true
spring.kafka.producer.properties.[max.in.flight.requests.per.connection]=5

# Public API Backend
public.api.url=${PUBLIC_API}

# Redis Config
spring.data.redis.database=${REDIS_DATABASE}
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.timeout=3600

#Login Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# Payos Config
payos.client-id=${PAYOS_CLIENT_ID}
payos.api-key=${PAYOS_API_KEY}
payos.checksum-key=${PAYOS_CHECKSUM_KEY}
payos.cancel-url="https://blossom.isolutions.top/wallet/add-balance"
payos.return-url="https://blossom.isolutions.top/wallet/add-balance"

# Cloud Config
cloud.aws.using.s3=true
cloud.aws.using.cloudwatch=false
cloud.aws.bucket.name=${AWS_BUCKET_NAME}
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_PRIVATE_KEY}
cloud.aws.region.static=${AWS_REGION}

#Audit
spring.jpa.properties.hibernate.envers.audit_table_suffix=_aud
spring.jpa.properties.hibernate.envers.store_data_at_delete=true
spring.data.jpa.repositories.enabled=true
spring.jackson.serialization.fail-on-empty-beans=false




